{"version":3,"file":"static/js/468.9fc6033a.chunk.js","mappings":"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","sources":["components/ChatList.tsx","components/MembersList.tsx","components/OverViewItem.tsx","components/Scrollbar.tsx","components/StatisticsChartWidget.tsx","components/Tasks.tsx","components/VerticalForm.tsx","components/FormInput.tsx","pages/dashboard/Ecommerce/data.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { Card, Dropdown, Row, Col } from \"react-bootstrap\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n//components\nimport { FormInput } from \"../components/\";\nimport Scrollbar from \"../components/Scrollbar\";\n\n// images\nimport profilePic from \"../assets/images/users/avatar-1.jpg\";\n\n/* Chat Item Avatar */\nconst ChatItemAvatar = ({\n  userAvatar,\n  postedOn,\n}: {\n  userAvatar: string;\n  postedOn: string;\n}) => {\n  return (\n    <>\n      <div className=\"chat-avatar\">\n        <img src={userAvatar} alt={userAvatar} />\n        <i>{postedOn}</i>\n      </div>\n    </>\n  );\n};\n\n/* Chat Item Text */\nconst ChatItemText = ({\n  userName,\n  text,\n}: {\n  userName: string;\n  text: string;\n}) => {\n  return (\n    <>\n      <div className=\"conversation-text\">\n        <div className=\"ctext-wrap\">\n          <i>{userName}</i>\n          <p>{text}</p>\n        </div>\n      </div>\n    </>\n  );\n};\n\n/* Chat Item */\nconst chatItemDefaultProps = {\n  placement: \"\",\n  children: PropTypes.object,\n  className: \"\",\n};\n\nconst ChatItem = ({\n  children,\n  placement,\n  className,\n}: {\n  children: any;\n  placement: string;\n  className: string;\n}) => {\n  return (\n    <li\n      className={classNames(\n        \"clearfix\",\n        { odd: placement === \"left\" },\n        className\n      )}\n    >\n      {children}\n    </li>\n  );\n};\n\nChatItem.defaultProps = chatItemDefaultProps;\n\n/**\n * ChatForm\n */\n\ninterface FormValues {\n  newMessage: string;\n}\n\n/**\n * Renders the ChatForm\n */\nconst ChatForm = ({\n  onNewMessagesPosted,\n}: {\n  onNewMessagesPosted: (message: string) => void;\n}) => {\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      newMessage: yup.string().required(\"Please enter your messsage\"),\n    })\n  );\n\n  const methods = useForm<FormValues>({ resolver: schemaResolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    reset,\n  } = methods;\n\n  /**\n   * Handle valid form submission\n   */\n  const handleValidMessageSubmit: SubmitHandler<FormValues> = (values) => {\n    const message = values[\"newMessage\"];\n    onNewMessagesPosted(message);\n    reset();\n  };\n\n  return (\n    <>\n      <form\n        name=\"chat-form\"\n        id=\"chat-form\"\n        onSubmit={handleSubmit(handleValidMessageSubmit)}\n      >\n        <Row>\n          <Col>\n            <FormInput\n              type=\"text\"\n              name=\"newMessage\"\n              className=\"form-control chat-input\"\n              placeholder=\"Enter your text\"\n              register={register}\n              key=\"newMessage\"\n              errors={errors}\n              control={control}\n            />\n          </Col>\n          <Col className=\"col-auto\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-danger chat-send w-100 waves-effect waves-light\"\n            >\n              Send\n            </button>\n          </Col>\n        </Row>\n      </form>\n    </>\n  );\n};\n\n/**\n * ChatList\n */\nexport interface MessageItemTypes {\n  id: number;\n  userPic?: string;\n  userName: string;\n  text: string;\n  postedOn: string;\n}\n\ninterface ChatListProps {\n  title?: string;\n  className?: string;\n  messages: Array<MessageItemTypes>;\n}\n\n/**\n * Renders the ChatList\n */\nconst ChatList = (props: ChatListProps) => {\n  const [messages, setMessages] = useState<Array<MessageItemTypes>>(\n    props.messages\n  );\n\n  /**\n   * Handle new message posted\n   */\n  const handleNewMessagePosted = (message: string) => {\n    // save new message\n    setMessages(\n      messages.concat({\n        id: messages.length + 1,\n        userPic: profilePic,\n        userName: \"Dominic\",\n        text: message,\n        postedOn: new Date().getHours() + \":\" + new Date().getMinutes(),\n      })\n    );\n  };\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <Dropdown className=\"float-end\" align=\"end\">\n            <Dropdown.Toggle\n              as=\"a\"\n              className=\"cursor-pointer arrow-none text-muted\"\n            >\n              <i className=\"uil uil-ellipsis-v\"></i>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item>\n                <i className=\"uil uil-refresh me-2\"></i>Refresh\n              </Dropdown.Item>\n              <Dropdown.Item>\n                <i className=\"uil uil-user-plus me-2\"></i>Add New\n              </Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item className=\"text-danger\">\n                <i className=\"uil uil-exit me-2\"></i>Exit\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <h4 className=\"header-title mb-4\">{props.title}</h4>\n\n          <div className=\"chat-conversation\">\n            {/* chat messages */}\n            <Scrollbar style={{ maxHeight: \"314px\", width: \"100%\" }}>\n              <ul className={classNames(\"conversation-list\", props.className)}>\n                {(messages || []).map((message, i) => {\n                  return (\n                    <ChatItem\n                      key={i}\n                      placement={\n                        message.userName === \"Dominic\" ? \"left\" : \"right\"\n                      }\n                    >\n                      {message.userPic && (\n                        <ChatItemAvatar\n                          userAvatar={message.userPic}\n                          postedOn={message.postedOn}\n                        />\n                      )}\n                      <ChatItemText\n                        userName={message.userName}\n                        text={message.text}\n                      />\n                    </ChatItem>\n                  );\n                })}\n              </ul>\n            </Scrollbar>\n\n            {/* chat form */}\n            <ChatForm onNewMessagesPosted={handleNewMessagePosted} />\n          </div>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default ChatList;\n","import React from \"react\";\nimport { Card, Dropdown } from \"react-bootstrap\";\n\nexport interface MembersTypes {\n  id: number;\n  name: string;\n  avatar: string;\n  designation: string;\n}\n\ninterface MembersListProps {\n  title: string;\n  members: MembersTypes[];\n}\n\nconst MembersList = ({ title, members }: MembersListProps) => {\n  return (\n    <Card>\n      <Card.Body>\n        <h6 className=\"header-title mb-3\">{title}</h6>\n\n        {(members || []).map((item, index) => {\n          return (\n            <div key={index} className=\"d-flex mt-1 border-top pt-2\">\n              <img src={item.avatar} className=\"avatar rounded me-3\" alt=\"\" />\n              <div className=\"flex-grow-1\">\n                <h5 className=\"mt-1 mb-0 fs-15\">{item.name}</h5>\n                <h6 className=\"text-muted fw-normal mt-1 mb-2\">\n                  {item.designation}\n                </h6>\n              </div>\n\n              <Dropdown className=\"align-self-center float-end\" align=\"end\">\n                <Dropdown.Toggle\n                  as=\"a\"\n                  className=\"cursor-pointer arrow-none text-muted\"\n                >\n                  <i className=\"uil uil-ellipsis-v\"></i>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  <Dropdown.Item>\n                    <i className=\"uil uil-edit-alt me-2\"></i>Edit\n                  </Dropdown.Item>\n                  <Dropdown.Item>\n                    <i className=\"uil uil-exit me-2\"></i>Remove from Team\n                  </Dropdown.Item>\n                  <Dropdown.Divider />\n                  <Dropdown.Item className=\"text-danger\">\n                    <i className=\"uil uil-trash me-2\"></i>Delete\n                  </Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default MembersList;\n","import React from \"react\";\nimport FeatherIcon from \"feather-icons-react\";\nimport classNames from \"classnames\";\n\ninterface OverViewItemProps {\n  stats: string;\n  title: string;\n  icon: string;\n  iconClass?: string;\n}\n\nconst OverViewItem = ({ stats, title, icon, iconClass }: OverViewItemProps) => {\n  return (\n    <div className=\"d-flex p-3 border-bottom\">\n      <div className=\"flex-grow-1\">\n        <h4 className=\"mt-0 mb-1 fs-22\">{stats}</h4>\n        <span className=\"text-muted\">{title}</span>\n      </div>\n      <FeatherIcon\n        icon={icon}\n        className={classNames(\"align-self-center\", \"icon-dual\", iconClass)}\n      />\n    </div>\n  );\n};\n\nexport default OverViewItem;\n","import React from \"react\";\nimport SimpleBar from \"simplebar-react\";\n\ninterface ScrollbarProps extends SimpleBar.Props {\n  className?: string;\n  style?: any;\n  children?: any;\n}\n\nconst Scrollbar = ({\n  className,\n  style,\n  children,\n  ...otherProps\n}: ScrollbarProps) => {\n  return (\n    <SimpleBar className={className} style={style} {...otherProps}>\n      {children}\n    </SimpleBar>\n  );\n};\n\nexport default Scrollbar;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport Chart from \"react-apexcharts\";\nimport { ApexOptions } from \"apexcharts\";\nimport classNames from \"classnames\";\n\ninterface StatisticsChartWidgetProps {\n  title?: string;\n  stats?: string;\n  trend: {\n    textClass: string;\n    icon: string;\n    value: string;\n  };\n  colors?: Array<string>;\n}\n\nconst StatisticsChartWidget = ({\n  title,\n  stats,\n  trend,\n  colors,\n}: StatisticsChartWidgetProps) => {\n  //  default options\n  const options: ApexOptions = {\n    chart: {\n      type: \"area\",\n      sparkline: {\n        enabled: true,\n      },\n    },\n    stroke: {\n      width: 2,\n      curve: \"smooth\",\n    },\n    markers: {\n      size: 0,\n    },\n    colors: colors,\n    tooltip: {\n      theme: \"dark\",\n      fixed: {\n        enabled: false,\n      },\n      x: {\n        show: false,\n      },\n      y: {\n        title: {\n          formatter: (seriesName) => {\n            return \"\";\n          },\n        },\n      },\n      marker: {\n        show: false,\n      },\n    },\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        type: \"vertical\",\n        shadeIntensity: 1,\n        inverseColors: false,\n        opacityFrom: 0.45,\n        opacityTo: 0.05,\n        stops: [45, 100],\n      },\n    },\n  };\n\n  // chart data\n  const series = [\n    {\n      data: [25, 66, 41, 85, 63, 25, 44, 12, 36, 9, 54],\n    },\n  ];\n\n  return (\n    <Card>\n      <Card.Body>\n        <div className=\"d-flex\">\n          <div className=\"flex-grow-1\">\n            <span className=\"text-muted text-uppercase fs-12 fw-bold\">\n              {title}\n            </span>\n            <h3 className=\"mb-0\">{stats}</h3>\n          </div>\n          <div className=\"align-self-center flex-shrink-0\">\n            <Chart\n              className=\"apex-charts\"\n              options={options}\n              series={series}\n              type=\"area\"\n              height={45}\n              width={80}\n            />\n            <span className={classNames(\"fw-bold\", \"fs-13\", trend.textClass)}>\n              <i className={trend.icon}></i> {trend.value}\n            </span>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default StatisticsChartWidget;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\n// components\nimport Scrollbar from \"./Scrollbar\";\n\nexport interface TaskItemTypes {\n  id: number;\n  title: string;\n  dueDate: string;\n}\n\ninterface TasksProps {\n  tasks: TaskItemTypes[];\n}\n\nconst Tasks = ({ tasks }: TasksProps) => {\n  return (\n    <Card>\n      <Card.Body>\n        <Link to=\"#\" className=\"btn btn-primary btn-sm float-end\">\n          View All\n        </Link>\n        <h5 className=\"mb-4 header-title\">Tasks</h5>\n\n        <Scrollbar style={{ maxHeight: \"352px\" }} className=\"px-1\">\n          {(tasks || []).map((item, index) => {\n            return (\n              <div key={index} className=\"mt-2\">\n                <div className=\"form-check\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"task1\"\n                  />\n                  <label className=\"form-check-label\" htmlFor=\"task1\">\n                    {item.title}\n                  </label>\n                  <p className=\"fs-13 text-muted\">Due on {item.dueDate}</p>\n                </div>\n              </div>\n            );\n          })}\n        </Scrollbar>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Tasks;\n","import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  startIcon?: any;\n  label?: string;\n  type?: string;\n  name: string;\n  comp?: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  textClassName?: string;\n  refCallback?: any;\n  action?: any;\n  rows?: string | number;\n}\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Control\n        type={type}\n        placeholder={placeholder}\n        name={name}\n        as={comp}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        rows={rows}\n        {...otherProps}\n      ></Form.Control>\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Check\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// handle select controls\nconst SelectInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Select\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n  startIcon,\n  type,\n  name,\n  placeholder,\n  comp,\n  register,\n  errors,\n  rows,\n  className,\n  textClassName,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <InputGroup>\n      <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n      {type === \"select\" ? (\n        <SelectInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      ) : (\n        <TextualInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      )}\n    </InputGroup>\n  );\n};\n\nconst FormInput = ({\n  startIcon,\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  textClassName,\n  refCallback,\n  action,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"checkbox\" || type === \"radio\" ? (\n            <Form.Group className={containerClass}>\n              <CheckInput\n                type={type}\n                label={label}\n                name={name}\n                placeholder={placeholder}\n                refCallback={refCallback}\n                errors={errors}\n                register={register}\n                comp={comp}\n                className={className}\n                rows={rows}\n                {...otherProps}\n              />\n            </Form.Group>\n          ) : type === \"select\" ? (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <SelectInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          ) : (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <TextualInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","// images\nimport avatar1 from \"../../../assets/images/users/avatar-7.jpg\";\nimport avatar2 from \"../../../assets/images/users/avatar-9.jpg\";\nimport avatar3 from \"../../../assets/images/users/avatar-4.jpg\";\nimport avatar4 from \"../../../assets/images/users/avatar-1.jpg\";\nimport avatar5 from \"../../../assets/images/users/avatar-8.jpg\";\nimport profilePic2 from \"../../../assets/images/users/avatar-5.jpg\";\n\n// types\nimport { MembersTypes } from \"../../../components/MembersList\";\nimport { TaskItemTypes } from \"../../../components/Tasks\";\nimport { MessageItemTypes } from \"../../../components/ChatList\";\n\nexport interface OrdersItemTypes {\n  id: number;\n  product: string;\n  customer: string;\n  price: string;\n  status: string;\n}\n\nconst orderDetails: OrdersItemTypes[] = [\n  {\n    id: 98754,\n    product: \"ASOS Ridley High\",\n    customer: \"Otto B\",\n    price: \"$79.49\",\n    status: \"Pending\",\n  },\n  {\n    id: 98753,\n    product: \"Marco Lightweight Shirt\",\n    customer: \"Mark P\",\n    price: \"$125.49\",\n    status: \"Delivered\",\n  },\n  {\n    id: 98752,\n    product: \"Half Sleeve Shirt\",\n    customer: \"Dave B\",\n    price: \"$35.49\",\n    status: \"Declined\",\n  },\n  {\n    id: 98751,\n    product: \"Lightweight Jacket\",\n    customer: \"Shreyu N\",\n    price: \"$49.49\",\n    status: \"Delivered\",\n  },\n  {\n    id: 98750,\n    product: \"Marco Shoes\",\n    customer: \"Rik N\",\n    price: \"$69.49\",\n    status: \"Declined\",\n  },\n];\n\nconst topPerformers: MembersTypes[] = [\n  {\n    id: 1,\n    name: \"Shreyu N\",\n    avatar: avatar1,\n    designation: \"Senior Sales Guy\",\n  },\n  {\n    id: 2,\n    name: \"Greeva Y\",\n    avatar: avatar2,\n    designation: \"Social Media Campaign\",\n  },\n  {\n    id: 3,\n    name: \"Nik G\",\n    avatar: avatar3,\n    designation: \"Inventory Manager\",\n  },\n  {\n    id: 4,\n    name: \"Hardik G\",\n    avatar: avatar4,\n    designation: \"Sales Person\",\n  },\n  {\n    id: 5,\n    name: \"GB Patel G\",\n    avatar: avatar5,\n    designation: \"Sales Person\",\n  },\n];\n\nconst tasks: TaskItemTypes[] = [\n  {\n    id: 1,\n    title: \"Draft the new contract document for sales team\",\n    dueDate: \"24 Aug, 2019\",\n  },\n  {\n    id: 2,\n    title: \"iOS App home page\",\n    dueDate: \"23 Aug, 2019\",\n  },\n  {\n    id: 3,\n    title: \"Write a release note for Shreyu\",\n    dueDate: \"22 Aug, 2019\",\n  },\n  {\n    id: 4,\n    title: \"Invite Greeva to a project shreyu admin\",\n    dueDate: \"21 Aug, 2019\",\n  },\n  {\n    id: 5,\n    title: \"Enable analytics tracking for main website\",\n    dueDate: \"20 Aug, 2019\",\n  },\n  {\n    id: 6,\n    title: \"Invite user to a project\",\n    dueDate: \"18 Aug, 2019\",\n  },\n  {\n    id: 7,\n    title: \"Write a release note\",\n    dueDate: \"18 Aug, 2019\",\n  },\n];\nconst chatMessages: MessageItemTypes[] = [\n  {\n    id: 1,\n    userPic: profilePic2,\n    userName: \"Geneva\",\n    text: \"Hello!\",\n    postedOn: \"10:00\",\n  },\n  {\n    id: 2,\n    userPic: avatar4,\n    userName: \"Dominic\",\n    text: \"Hi, How are you? What about our next meeting?\",\n    postedOn: \"10:01\",\n  },\n  {\n    id: 3,\n    userPic: profilePic2,\n    userName: \"Geneva\",\n    text: \"Yeah everything is fine\",\n    postedOn: \"10:02\",\n  },\n  {\n    id: 4,\n    userPic: avatar4,\n    userName: \"Dominic\",\n    text: \"Wow that's great!\",\n    postedOn: \"10:03\",\n  },\n  {\n    id: 5,\n    userPic: profilePic2,\n    userName: \"Geneva\",\n    text: \"Cool!\",\n    postedOn: \"10:03\",\n  },\n];\n\nexport { orderDetails, topPerformers, tasks, chatMessages };\n"],"names":["ChatItemAvatar","_ref","userAvatar","postedOn","_jsx","_Fragment","children","_jsxs","className","src","alt","ChatItemText","_ref2","userName","text","chatItemDefaultProps","placement","PropTypes","ChatItem","_ref3","classNames","odd","defaultProps","ChatForm","_ref4","onNewMessagesPosted","schemaResolver","yupResolver","yup","shape","newMessage","required","methods","useForm","resolver","handleSubmit","register","control","formState","errors","reset","name","id","onSubmit","values","message","Row","Col","FormInput","type","placeholder","props","messages","setMessages","useState","Card","Dropdown","align","as","title","Scrollbar","style","maxHeight","width","map","i","userPic","concat","length","profilePic","Date","getHours","getMinutes","members","item","index","avatar","designation","stats","icon","iconClass","FeatherIcon","otherProps","SimpleBar","trend","colors","options","chart","sparkline","enabled","stroke","curve","markers","size","tooltip","theme","fixed","x","show","y","formatter","seriesName","marker","fill","gradient","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","Chart","series","data","height","textClass","value","tasks","Link","to","htmlFor","dueDate","defaultValues","formClass","noValidate","Array","isArray","child","React","key","TextualInput","comp","rows","refCallback","Form","ref","r","isInvalid","CheckInput","label","SelectInput","FormInputGroup","startIcon","textClassName","InputGroup","_ref5","labelClassName","containerClass","action","orderDetails","product","customer","price","status","topPerformers","avatar1","avatar2","avatar3","avatar4","avatar5","chatMessages","profilePic2"],"sourceRoot":""}