{"version":3,"file":"static/js/1784.b0e05dd5.chunk.js","mappings":"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","sources":["components/VerticalForm.tsx","components/FormInput.tsx","pages/forms/Validation.tsx","../node_modules/react-bootstrap/esm/InputGroupContext.js"],"sourcesContent":["import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  startIcon?: any;\n  label?: string;\n  type?: string;\n  name: string;\n  comp?: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  textClassName?: string;\n  refCallback?: any;\n  action?: any;\n  rows?: string | number;\n}\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Control\n        type={type}\n        placeholder={placeholder}\n        name={name}\n        as={comp}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        rows={rows}\n        {...otherProps}\n      ></Form.Control>\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Check\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// handle select controls\nconst SelectInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Select\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n  startIcon,\n  type,\n  name,\n  placeholder,\n  comp,\n  register,\n  errors,\n  rows,\n  className,\n  textClassName,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <InputGroup>\n      <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n      {type === \"select\" ? (\n        <SelectInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      ) : (\n        <TextualInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      )}\n    </InputGroup>\n  );\n};\n\nconst FormInput = ({\n  startIcon,\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  textClassName,\n  refCallback,\n  action,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"checkbox\" || type === \"radio\" ? (\n            <Form.Group className={containerClass}>\n              <CheckInput\n                type={type}\n                label={label}\n                name={name}\n                placeholder={placeholder}\n                refCallback={refCallback}\n                errors={errors}\n                register={register}\n                comp={comp}\n                className={className}\n                rows={rows}\n                {...otherProps}\n              />\n            </Form.Group>\n          ) : type === \"select\" ? (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <SelectInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          ) : (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <TextualInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Row, Col, Card, Button, InputGroup, Form } from \"react-bootstrap\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\nimport { FormInput, VerticalForm } from \"../../components\";\n\ninterface UserData {\n  username: string;\n  email: string;\n  password: string;\n  confirmpassword: string;\n  checkbox: boolean;\n}\n\ninterface UserData2 {\n  webSite: string;\n  email2: string;\n  password2: string;\n  confirmpassword2: string;\n  horizontalCheck: boolean;\n}\n\nconst NormalFormValidation = () => {\n  const [validated, setValidated] = useState<boolean>(false);\n\n  /*\n   * handle form submission\n   */\n  const handleSubmit = (event: any) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Bootstrap Validation - Normal</h4>\n          <p className=\"sub-header\">\n            Provide valuable, actionable feedback to your users with HTML5 form\n            validation–available in all our supported browsers.\n          </p>\n\n          <Form noValidate validated={validated} onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"First name\"\n                defaultValue=\"Mark\"\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"validationCustom02\">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Last name\"\n                defaultValue=\"Otto\"\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"validationCustomUsername\">\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  required\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a username.\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"validationCustom03\">\n              <Form.Label>City</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"City\" required />\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid city.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"validationCustom04\">\n              <Form.Label>State</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"State\" required />\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid state.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"validationCustom05\">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Zip\" required />\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid zip.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\">\n              <Form.Check\n                id=\"validation-check\"\n                required\n                label=\"Agree to terms and conditions\"\n                feedback=\"You must agree before submitting.\"\n              />\n            </Form.Group>\n            <Button type=\"submit\">Submit form</Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst FormValidationWithTooltip = () => {\n  const [validated, setValidated] = useState<boolean>(false);\n\n  /*\n   * handle form submission\n   */\n  const handleSubmit = (event: any) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    setValidated(true);\n  };\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Bootstrap Validation (Tooltips)</h4>\n          <p className=\"sub-header\">\n            If your form layout allows it, you can swap the{\" \"}\n            <code>.valid | invalid-feedback</code> classes for{\" \"}\n            <code>.valid | invalid-tooltip</code> classes to display validation\n            feedback in a styled tooltip.\n          </p>\n          <Form noValidate validated={validated} onSubmit={handleSubmit}>\n            <Form.Group\n              className=\"position-relative mb-3\"\n              controlId=\"validationTooltip01\"\n            >\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"First name\"\n                defaultValue=\"Mark\"\n              />\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              className=\"position-relative mb-3\"\n              controlId=\"validationTooltip02\"\n            >\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Last name\"\n                defaultValue=\"Otto\"\n              />\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              className=\"position-relative mb-3\"\n              controlId=\"validationCustonTooltipme\"\n            >\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  required\n                />\n                <Form.Control.Feedback type=\"invalid\" tooltip>\n                  Please choose a username.\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n            <Form.Group\n              className=\"position-relative mb-3\"\n              controlId=\"validationTooltip03\"\n            >\n              <Form.Label>City</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"City\" required />\n              <Form.Control.Feedback type=\"invalid\" tooltip>\n                Please provide a valid city.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              className=\"position-relative mb-3\"\n              controlId=\"validationTooltip04\"\n            >\n              <Form.Label>State</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"State\" required />\n              <Form.Control.Feedback type=\"invalid\" tooltip>\n                Please provide a valid state.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              className=\"position-relative mb-3\"\n              controlId=\"validationTooltip05\"\n            >\n              <Form.Label>Zip</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Zip\" required />\n              <Form.Control.Feedback type=\"invalid\" tooltip>\n                Please provide a valid zip.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Button type=\"submit\">Submit form</Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst BasicForm = () => {\n  /*\n    form validation schema\n    */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      username: yup.string().required(\"Please enter Username\"),\n      email: yup.string().required(\"Please enter Email address\"),\n      password: yup.string().required(\"Please enter Password\"),\n      confirmpassword: yup\n        .string()\n        .oneOf([yup.ref(\"password\"), null], \"Passwords don't match\")\n        .required(\"This value is required.\"),\n      checkbox: yup.bool().oneOf([true]),\n    })\n  );\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Basic Form</h4>\n        <p className=\"sub-header\">\n          React validation with react-hook-form library.\n        </p>\n        <VerticalForm<UserData>\n          onSubmit={() => {}}\n          resolver={schemaResolver}\n          defaultValues={{ username: \"test\" }}\n        >\n          <FormInput\n            label={\"Username\"}\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"Enter your name\"\n            containerClass={\"mb-3\"}\n          />\n          <FormInput\n            label={\"Email address\"}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter email\"\n            containerClass={\"mb-3\"}\n          />\n          <FormInput\n            label={\"Password\"}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            containerClass={\"mb-3\"}\n          />\n          <FormInput\n            label={\"Confirm Password\"}\n            type=\"password\"\n            name=\"confirmpassword\"\n            placeholder=\"Password\"\n            containerClass={\"mb-3\"}\n          />\n          <FormInput\n            label={\"Remember me\"}\n            type=\"checkbox\"\n            name=\"checkbox\"\n            containerClass={\"mb-3\"}\n          />\n\n          <div className=\"text-md-end mb-0\">\n            <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n              Submit\n            </Button>\n            <Button variant=\"secondary\" type=\"reset\">\n              Cancel\n            </Button>\n          </div>\n        </VerticalForm>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst HorizontalForm = () => {\n  /*\n    form validation schema\n    */\n  const schemaResolver2 = yupResolver(\n    yup.object().shape({\n      email2: yup.string().required(\"Please enter Email address\"),\n      password2: yup.string().required(\"Please enter Password\"),\n      confirmPassword2: yup\n        .string()\n        .oneOf([yup.ref(\"password\"), null], \"Passwords don't match\")\n        .required(\"This value is required.\"),\n      webSite: yup.string().required(\"Please enter URL\"),\n      horizontalCheck: yup.bool().oneOf([true]),\n    })\n  );\n\n  const methods = useForm<UserData2>({\n    defaultValues: { email2: \"shreyu@coderthemes.com\" },\n    resolver: schemaResolver2,\n  });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Horizontal Form</h4>\n        <p className=\"sub-header\">\n          React validation with react-hook-form library.\n        </p>\n        <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(() => {})}>\n          <Form.Group as={Row} className=\"mb-3\">\n            <Form.Label column md={4}>\n              Email<span className=\"text-danger\">*</span>\n            </Form.Label>\n            <Col md={7}>\n              <FormInput\n                type=\"email\"\n                name=\"email2\"\n                placeholder=\"Email\"\n                register={register}\n                key=\"email2\"\n                errors={errors}\n                control={control}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\">\n            <Form.Label column md={4}>\n              Password<span className=\"text-danger\">*</span>\n            </Form.Label>\n            <Col md={7}>\n              <FormInput\n                type=\"password\"\n                name=\"password2\"\n                placeholder=\"Password\"\n                register={register}\n                key=\"password2\"\n                errors={errors}\n                control={control}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\">\n            <Form.Label column md={4}>\n              Confirm Password<span className=\"text-danger\">*</span>\n            </Form.Label>\n            <Col md={7}>\n              <FormInput\n                type=\"password\"\n                name=\"confirmPassword2\"\n                placeholder=\"Password\"\n                register={register}\n                key=\"confirmPassword2\"\n                errors={errors}\n                control={control}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\">\n            <Form.Label column md={4}>\n              Web Site<span className=\"text-danger\">*</span>\n            </Form.Label>\n            <Col md={7}>\n              <FormInput\n                type=\"url\"\n                name=\"webSite\"\n                placeholder=\"URL\"\n                register={register}\n                key=\"webSite\"\n                errors={errors}\n                control={control}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"horizontalCheck\">\n            <Col md={{ span: 8, offset: 4 }}>\n              <FormInput\n                label={\"Remember me\"}\n                type=\"checkbox\"\n                name=\"horizontalCheck\"\n                register={register}\n                key=\"horizontalCheck\"\n                errors={errors}\n                control={control}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} className=\"mb-3\">\n            <Col sm={{ span: 8, offset: 4 }}>\n              <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n                Submit\n              </Button>\n              <Button variant=\"secondary\" type=\"reset\">\n                Cancel\n              </Button>\n            </Col>\n          </Form.Group>\n        </form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst FormValidation = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Forms\", path: \"/forms/validation\" },\n          { label: \"Validation\", path: \"/forms/validation\", active: true },\n        ]}\n        title={\"Validation\"}\n      />\n\n      <Row>\n        <Col lg={6}>\n          <NormalFormValidation />\n        </Col>\n\n        <Col lg={6}>\n          <FormValidationWithTooltip />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <BasicForm />\n        </Col>\n        <Col lg={6}>\n          <HorizontalForm />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default FormValidation;\n","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","TextualInput","placeholder","comp","rows","refCallback","otherProps","_jsxs","_Fragment","Form","as","id","ref","r","isInvalid","CheckInput","_ref2","label","SelectInput","_ref3","FormInputGroup","_ref4","startIcon","textClassName","InputGroup","_ref5","labelClassName","containerClass","action","NormalFormValidation","validated","setValidated","useState","Card","event","currentTarget","checkValidity","preventDefault","stopPropagation","controlId","required","defaultValue","hasValidation","feedback","Button","FormValidationWithTooltip","tooltip","BasicForm","schemaResolver","yupResolver","yup","shape","username","email","password","confirmpassword","oneOf","checkbox","VerticalForm","FormInput","variant","HorizontalForm","schemaResolver2","email2","password2","confirmPassword2","webSite","horizontalCheck","Row","column","md","Col","span","offset","sm","FormValidation","PageTitle","breadCrumbItems","path","active","title","lg","context","displayName"],"sourceRoot":""}