{"version":3,"file":"static/js/2439.c3f410b1.chunk.js","mappings":"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","sources":["pages/tables/Basic.tsx","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["import React from \"react\";\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\n\ninterface TableRecords {\n  id: number;\n  firstName: string;\n  lastName: string;\n  userName: string;\n}\n\n// dummy records\nconst records: TableRecords[] = [\n  { id: 1, firstName: \"Mark\", lastName: \"Otto\", userName: \"@mdo\" },\n  { id: 2, firstName: \"Jacob\", lastName: \"Thornton\", userName: \"@fat\" },\n  { id: 3, firstName: \"Larry\", lastName: \"the Bird\", userName: \"@twitter\" },\n];\n\nconst BasicTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Basic example</h4>\n        <p className=\"sub-header\">\n          For basic styling—light padding and only horizontal dividers—add the\n          base class <code>.table</code> to any <code>&lt;Table&gt;</code>.\n        </p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"table mb-0\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(records || []).map((record, index) => {\n                return (\n                  <tr key={index}>\n                    <th scope=\"row\">{record.id}</th>\n                    <td>{record.firstName}</td>\n                    <td>{record.lastName}</td>\n                    <td>{record.userName}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst InverseTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Table Dark</h4>\n        <p className=\"sub-header\">\n          You can also invert the colors—with light text on dark backgrounds—by\n          specifying variant <code>dark</code>.\n        </p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\" variant=\"dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(records || []).map((record, index) => {\n                return (\n                  <tr key={index}>\n                    <th scope=\"row\">{record.id}</th>\n                    <td>{record.firstName}</td>\n                    <td>{record.lastName}</td>\n                    <td>{record.userName}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst TableHeadOptions = ({ variant }: { variant: string }) => {\n  const theadClass: string = variant === \"light\" ? \"table-light\" : \"table-dark\";\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title mt-0 mb-1\">Table head {variant}</h4>\n          <p className=\"sub-header\">\n            Use one of two modifier classes to make <code>&lt;thead&gt;</code>s\n            appear light or dark gray.\n          </p>\n          <div className=\"table-responsive\">\n            <Table className=\"mb-0\">\n              <thead className={theadClass}>\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">First</th>\n                  <th scope=\"col\">Last</th>\n                  <th scope=\"col\">Handle</th>\n                </tr>\n              </thead>\n              <tbody>\n                {(records || []).map((record, index) => {\n                  return (\n                    <tr key={index}>\n                      <th scope=\"row\">{record.id}</th>\n                      <td>{record.firstName}</td>\n                      <td>{record.lastName}</td>\n                      <td>{record.userName}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </div>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst BorderedTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Bordered table</h4>\n        <p className=\"sub-header\">\n          Add <code>bordered</code> attribute for borders on all sides of the\n          table and cells.\n        </p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\" bordered>\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(records || []).map((record, index) => {\n                return (\n                  <tr key={index}>\n                    <th scope=\"row\">{record.id}</th>\n                    <td>{record.firstName}</td>\n                    <td>{record.lastName}</td>\n                    <td>{record.userName}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst BorderedColorTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Border Color</h4>\n        <p className=\"sub-header\">\n          Add <code>.border-primary</code> for customised borders on all sides\n          of the table and cells.\n        </p>\n\n        <Table className=\"border-primary mb-0\" bordered>\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">First</th>\n              <th scope=\"col\">Last</th>\n              <th scope=\"col\">Handle</th>\n            </tr>\n          </thead>\n          <tbody>\n            {(records || []).map((record, index) => {\n              return (\n                <tr key={index}>\n                  <th scope=\"row\">{record.id}</th>\n                  <td>{record.firstName}</td>\n                  <td>{record.lastName}</td>\n                  <td>{record.userName}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst BorderlessTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Borderless table</h4>\n        <p className=\"sub-header\">\n          Add <code>borderless</code> attribute for a table without borders.\n        </p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\" borderless>\n            <thead className=\"table-light\">\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(records || []).map((record, index) => {\n                return (\n                  <tr key={index}>\n                    <th scope=\"row\">{record.id}</th>\n                    <td>{record.firstName}</td>\n                    <td>{record.lastName}</td>\n                    <td>{record.userName}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst SmallTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Small table</h4>\n        <p className=\"sub-header\">\n          Add <code>size=\"sm\"</code> attribute to make tables more compact by\n          cutting cell padding in half\n        </p>\n\n        <Table className=\"mb-0\" size=\"sm\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">First</th>\n              <th scope=\"col\">Last</th>\n              <th scope=\"col\">Handle</th>\n            </tr>\n          </thead>\n          <tbody>\n            {(records || []).map((record, index) => {\n              return (\n                <tr key={index}>\n                  <th scope=\"row\">{record.id}</th>\n                  <td>{record.firstName}</td>\n                  <td>{record.lastName}</td>\n                  <td>{record.userName}</td>\n                </tr>\n              );\n            })}\n            <tr>\n              <th scope=\"row\">4</th>\n              <td colSpan={2}>Mark Otto</td>\n              <td>@mdo</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst HoverableTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Hoverable Rows</h4>\n        <p className=\"sub-header\">\n          Add <code>hover</code> attribute to enable a hover state on table rows\n        </p>\n\n        <Table className=\"mb-0\" hover>\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">First</th>\n              <th scope=\"col\">Last</th>\n              <th scope=\"col\">Handle</th>\n            </tr>\n          </thead>\n          <tbody>\n            {(records || []).map((record, index) => {\n              return (\n                <tr key={index}>\n                  <th scope=\"row\">{record.id}</th>\n                  <td>{record.firstName}</td>\n                  <td>{record.lastName}</td>\n                  <td>{record.userName}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst ActiveTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Active Tables</h4>\n        <p className=\"sub-header\">\n          Add <code>.table-active</code> to highlight a table row or cell.\n        </p>\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\" hover>\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(records || []).map((record, index) => {\n                return (\n                  <tr\n                    key={index}\n                    className={classNames({ \"table-active\": index === 0 })}\n                  >\n                    <th scope=\"row\">{record.id}</th>\n                    <td>{record.firstName}</td>\n                    <td className={classNames({ \"table-active\": index === 2 })}>\n                      {record.lastName}\n                    </td>\n                    <td>{record.userName}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst StripedRowsTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Striped Rows</h4>\n        <p className=\"sub-header\">\n          Use <code>striped</code> attribute to add zebra-striping to any table\n          row within the <code>&lt;tbody&gt;</code>.\n        </p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\" striped>\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(records || []).map((record, index) => {\n                return (\n                  <tr key={index}>\n                    <th scope=\"row\">{record.id}</th>\n                    <td>{record.firstName}</td>\n                    <td>{record.lastName}</td>\n                    <td>{record.userName}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst TableCaption = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Captions</h4>\n        <p className=\"sub-header\">\n          A <code>&lt;caption&gt;</code> functions like a heading for a table.\n          It helps users with screen readers to find a table and understand what\n          it’s about and decide if they want to read it.\n        </p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\">\n            <caption>List of users</caption>\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(records.slice(0, 2) || []).map((record, index) => {\n                return (\n                  <tr key={index}>\n                    <th scope=\"row\">{record.id}</th>\n                    <td>{record.firstName}</td>\n                    <td>{record.lastName}</td>\n                    <td>{record.userName}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst ContextualClasses = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Contextual classes</h4>\n        <p className=\"sub-header\">\n          Use contextual classes to color table rows or individual cells.\n        </p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Column heading</th>\n                <th>Column heading</th>\n                <th>Column heading</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className=\"table-active\">\n                <th scope=\"row\">1</th>\n                <td>Column content</td>\n                <td>Column content</td>\n                <td>Column content</td>\n              </tr>\n\n              <tr className=\"table-success\">\n                <th scope=\"row\">2</th>\n                <td>Column content</td>\n                <td>Column content</td>\n                <td>Column content</td>\n              </tr>\n\n              <tr className=\"table-info\">\n                <th scope=\"row\">3</th>\n                <td>Column content</td>\n                <td>Column content</td>\n                <td>Column content</td>\n              </tr>\n\n              <tr className=\"table-warning\">\n                <th scope=\"row\">4</th>\n                <td>Column content</td>\n                <td>Column content</td>\n                <td>Column content</td>\n              </tr>\n\n              <tr className=\"table-danger\">\n                <th scope=\"row\">5</th>\n                <td>Column content</td>\n                <td>Column content</td>\n                <td>Column content</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst NestingTables = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Nesting tables</h4>\n        <p className=\"sub-header\"></p>\n\n        <div className=\"table-responsive\">\n          <Table className=\"mb-0\" striped>\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">First</th>\n                <th scope=\"col\">Last</th>\n                <th scope=\"col\">Handle</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <th>1</th>\n                <td>Mark</td>\n                <td>Otto</td>\n                <td>@mdo</td>\n              </tr>\n              <tr>\n                <td colSpan={4}>\n                  <Table className=\"mb-0\">\n                    <thead>\n                      <tr>\n                        <th>header</th>\n                        <th>header</th>\n                        <th>header</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <th>A</th>\n                        <td>first</td>\n                        <td>last</td>\n                      </tr>\n                      <tr>\n                        <th>B</th>\n                        <td>first</td>\n                        <td>last</td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </td>\n              </tr>\n              <tr>\n                <th>3</th>\n                <td>Larry</td>\n                <td>the Bird</td>\n                <td>@twitter</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst ResponsiveTable = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title mt-0 mb-1\">Responsive tables</h4>\n        <p className=\"sub-header\">\n          Create responsive tables by wrapping any <code>&lt;Table&gt;</code> in{\" \"}\n          <code>responsive</code> attribute to make them scroll horizontally on\n          small devices (under 768px).\n        </p>\n\n        <Table className=\"mb-0\" responsive>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Table heading</th>\n              <th>Table heading</th>\n              <th>Table heading</th>\n              <th>Table heading</th>\n              <th>Table heading</th>\n              <th>Table heading</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th scope=\"row\">1</th>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">2</th>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">3</th>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n              <td>Table cell</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst Tables = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Tables\", path: \"/ui/tables/basic\" },\n          { label: \"Basic Tables\", path: \"/ui/tables/basic\", active: true },\n        ]}\n        title={\"Basic Tables\"}\n      />\n\n      <Row>\n        <Col lg={6}>\n          <BasicTable />\n        </Col>\n\n        <Col lg={6}>\n          <InverseTable />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <TableHeadOptions variant=\"light\" />\n        </Col>\n\n        <Col lg={6}>\n          <TableHeadOptions variant=\"dark\" />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <BorderedTable />\n        </Col>\n\n        <Col lg={6}>\n          <BorderedColorTable />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <BorderlessTable />\n        </Col>\n\n        <Col lg={6}>\n          <SmallTable />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <HoverableTable />\n        </Col>\n\n        <Col lg={6}>\n          <ActiveTable />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <StripedRowsTable />\n        </Col>\n\n        <Col lg={6}>\n          <TableCaption />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <ContextualClasses />\n        </Col>\n\n        <Col lg={6}>\n          <NestingTables />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={12}>\n          <ResponsiveTable />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Tables;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;"],"names":["records","id","firstName","lastName","userName","BasicTable","_jsx","Card","children","_jsxs","className","Table","scope","map","record","index","InverseTable","variant","TableHeadOptions","_ref","theadClass","_Fragment","BorderedTable","bordered","BorderedColorTable","BorderlessTable","borderless","SmallTable","size","colSpan","HoverableTable","hover","ActiveTable","classNames","StripedRowsTable","striped","TableCaption","slice","ContextualClasses","NestingTables","ResponsiveTable","responsive","Tables","React","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","lg","ref","bsPrefix","props","decoratedBsPrefix","useBootstrapPrefix","classes","concat","table","responsiveClass"],"sourceRoot":""}